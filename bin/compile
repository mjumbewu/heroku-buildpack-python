#!/usr/bin/env bash

# This script is a modified version of the
# [**Python Buildpack**](https://github.com/heroku/heroku-buildpack-python)
# compiler.  It is modified to install node.js dependencies as well.  The use
# case was originally to install less.js for a deployed Django app.
#
# A [buildpack](http://devcenter.heroku.com/articles/buildpacks) is an
# adapter between a Python application and Heroku's runtime.

# ## Usage
# Compiling an app into a slug is simple:
#
#     $ bin/compile <build-dir> <cache-dir>


# ## Assumptions
#
# This buildpack makes the following assumptions:
#
# - The desired Python VM is available on the base system.
# - Library dependencies are available on the base system.
# - Django applications should not require any platform-specific configuration.

# <hr />

# ## Context

# Fail fast and fail hard.
set -eo pipefail

# Prepend proper path for virtualenv hackery. This will be deprecated soon.
export PATH=:/usr/local/bin:$PATH

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2

# The detected application type (`Python`|`Python/Django`).
NAME=$($BIN_DIR/detect $BUILD_DIR)

# Where to store the Pip download cache.
CACHED_DIRS=".heroku"
PIP_DOWNLOAD_CACHE=${PIP_DOWNLOAD_CACHE:-$CACHE_DIR/pip_downloads}

# Static configurations for virtualenv caches.
LEGACY_VIRTUALENV_LOC="."
MODERN_VIRTUALENV_LOC=".heroku/venv"
LEGACY_VIRTUALENV_DIRS="bin include lib"
LEGACY_VIRTUALENV_TRIGGER="lib/python2.7"


# Python version. This will be used in the future to specify custom Pythons.
PYTHON_VERSION="2.7.2"
PYTHON_EXE="python2.7"

# The slug compiler doesn't do a very good job of sanitizing environment variables.
unset GIT_DIR

# We'll need to send these statics to other scripts we `source`.
export PIP_DOWNLOAD_CACHE
export BUILD_DIR

# Syntax sugar.
indent() {
  RE="s/^/       /"
  [ $(uname) == "Darwin" ] && sed -l "$RE" || sed -u "$RE"
}

function virtualenv (){
  python "$ROOT_DIR/vendor/virtualenv-1.7/virtualenv.py" "$@"
}

function puts-step (){
  echo "-----> $@"
}

function puts-warn (){
  echo " !     $@"
}

# ## Build Time
#

# Switch to the repo's context.
cd $BUILD_DIR

# ### Sanity Checks
#
# Just a little peace of mind.

# If no requirements given, assume `setup.py develop`.
if [ ! -f requirements.txt ]; then
  puts-step "No requirements.txt provided; assuming dist package."
  echo "-e ." > requirements.txt
fi

# ### The Cache
mkdir -p $CACHE_DIR

# Create set-aside `.heroku` folder.
mkdir -p .heroku

# Nice defaults.
LEGACY_VIRTUALENV=false
VIRTUALENV_LOC=$MODERN_VIRTUALENV_LOC

# Support "old-style" virtualenvs.
if [ -d $CACHE_DIR/$LEGACY_VIRTUALENV_TRIGGER ]; then
  LEGACY_VIRTUALENV=true
  VIRTUALENV_LOC=$LEGACY_VIRTUALENV_LOC
  CACHED_DIRS=$LEGACY_VIRTUALENV_DIRS

  # Warn for a checked-in virtualenv.
  if [ -d "lib" ] || [ -d "bin" ]; then
    puts-warn "You have a virtualenv checked in. You should ignore the appropriate paths in your repo. See http://devcenter.heroku.com/articles/gitignore for more info.";
  fi

  # Reject a conflicting checked-in virtualenv.
  if [ -f "lib/python2.7" ]; then
    puts-warn "Checked-in virtualenv conflict."
    exit 1;
  fi
fi

# Restore old artifacts from the cache.
for dir in $CACHED_DIRS; do
  cp -R $CACHE_DIR/$dir . &> /dev/null || true
done

# ### GIS Dependency Setup
#

# Install GEOS
if [ ! -d $CACHE_DIR/gdal ]; then
  cd $BUILD_DIR
  echo "-----> Fetching and installing GEOS 3.3.2"
  curl -O https://s3.amazonaws.com/cirheroku/geos-3.3.2-herkou.tar.gz >/dev/null 2>&1
  echo "-----> Installing ..."
  tar xzvf geos-3.3.2-herkou.tar.gz >/dev/null 2>&1
  mv geos $CACHE_DIR/geos
  rm geos-3.3.2-herkou.tar.gz
  echo "GEOS installed" | indent
fi

# Install Proj.4
if [ ! -d $CACHE_DIR/gdal ]; then
  cd $BUILD_DIR
  echo "-----> Fetching and installing Proj.4 4.7.0"
  curl -O https://s3.amazonaws.com/cirheroku/proj4-4.7.0-heroku.tar.gz >/dev/null 2>&1
  echo "-----> Installing ..."
  tar xzvf proj4-4.7.0-heroku.tar.gz >/dev/null 2>&1
  mv proj4 $CACHE_DIR/proj4
  rm proj4-4.7.0-heroku.tar.gz
  echo "Proj.4 installed" | indent
fi

# Install GDAL
if [ ! -d $CACHE_DIR/gdal ]; then
  cd $BUILD_DIR
  echo "-----> Fetching and installing GDAL 1.8.1"
  curl -O https://s3.amazonaws.com/cirheroku/gdal-1.8.1-heroku.tar.gz >/dev/null 2>&1
  echo "-----> Installing ..."
  tar xzvf gdal-1.8.1-heroku.tar.gz >/dev/null 2>&1
  mv gdal $CACHE_DIR/gdal
  rm gdal-1.8.1-heroku.tar.gz
  echo "GDAL installed" | indent
fi

# Create set-aside .geodjango folder and copy compiled files
mkdir -p .geodjango
cp -R $CACHE_DIR/geos .geodjango
cp -R $CACHE_DIR/proj4 .geodjango
cp -R $CACHE_DIR/gdal .geodjango

# ### Virtualenv Setup
#

# Create the virtualenv. Rebuild if corrupt.
# TODO: Bootstrap a bottled Python VM...

set +e
puts-step "Preparing Python interpreter ($PYTHON_VERSION)"
puts-step "Creating Virtualenv version $(virtualenv --version)"

# Try to create the virtualenv.
OUT=$(virtualenv --python $PYTHON_EXE --distribute --never-download --prompt='(venv) ' $VIRTUALENV_LOC 2>&1)

# If there's an error, purge and recreate.
[ $? -ne 0 ] && {
  puts-warn "Virtualenv corrupt, rebuilding."
  for dir in $VIRTUALENV_DIRS; do
    rm -fr $dir &> /dev/null || true
  done
  OUT=$(virtualenv --python $PYTHON_EXE --distribute --never-download  --prompt='(venv) ' $VIRTUALENV_LOC )
}
echo "$OUT" | indent

set -e

# Pylibmc support.
# See [`bin/steps/pylibmc`](pylibmc.html).
source $BIN_DIR/steps/pylibmc

# Activate the Virtualenv.
puts-step "Activating virtualenv"
source $VIRTUALENV_LOC/bin/activate

# Install Mercurial if it appears to be required.
if (grep -Fiq "hg+" requirements.txt) then
  pip install --use-mirrors mercurial | indent
fi

# Install dependencies with Pip.
puts-step "Installing dependencies using Pip version $(pip --version | awk '{print $2}')"
pip install --use-mirrors -r requirements.txt --src ./.heroku/src | indent

# Do additional application hackery if applications appears to be a Django app.
# Optionally, disable all Django-specific changes with `DISABLE_INJECTION` env.
#
# See [`bin/steps/django`](django.html).

if [ "$NAME" = "Python/Django" ] && ! [ "$DISABLE_INJECTION" ]; then
  source $BIN_DIR/steps/django
fi

# Make Virtualenv's paths relative for portability.
set +e
OUT=$(virtualenv --python $PYTHON_EXE  --relocatable $VIRTUALENV_LOC)
[ $? -ne 0 ] && {
  puts-warn "Error making virtualenv relocatable"
  echo "$OUT" | indent
  exit 1
}
set -e

# ### Finalize
#

# Store new artifacts in cache.
for dir in $CACHED_DIRS; do

  rm -rf $CACHE_DIR/$dir
  cp -R $dir $CACHE_DIR/
done

# ### Fin
# ### ...or so you thought!

################################################################################
######--------~~~~~~~~********* Node.js INSTALLATION!!! ********~~~~~~~~--------

# ==
# This is all taken verbatim from the nodejs buildback.
# https://github.com/heroku/heroku-buildpack-nodejs
# ==

# fail fast
set -e

# debug
# set -x

# clean up leaking environment
unset GIT_DIR

# config
SCONS_VERSION="1.2.0"
S3_BUCKET="heroku-buildpack-nodejs"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*"
  exit 1
}

function mktmpdir() {
  dir=$(mktemp -t node-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function run_npm() {
  command="$1"

  cd $BUILD_DIR
  HOME="$BUILD_DIR" $VENDORED_NODE/bin/node $VENDORED_NPM/cli.js $command 2>&1 | indent

  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to $command dependencies with npm"
    exit 1
  fi
}

function manifest_versions() {
  curl "http://${S3_BUCKET}.s3.amazonaws.com/manifest.${1}" -s -o - | tr -s '\n' ' '
}

function resolve_version() {
  available_versions="$1"
  requested_version="$2"
  default_version="$3"

  if [ "$2" == "" ]; then
    echo $3
  else
    args=""
    for version in $available_versions; do args="${args} -v \"${version}\""; done
    for version in $requested_version; do args="${args} -r \"${version}\""; done
    eval $bootstrap_node/bin/node $LP_DIR/vendor/node-semver/bin/semver ${args} | tail -n1
  fi
}

function package_engine_version() {
  version=$(cat $BUILD_DIR/package.json | $bootstrap_node/bin/node $LP_DIR/vendor/json/json engines.$1 2>/dev/null)
  if [ $? == 0 ]; then
    echo $version | sed -e 's/\([<>=]\) /\1/g'
  fi
}

function package_resolve_version() {
  engine="$1"
  resolved_version=$(resolve_version "${engine_versions[$engine]}" "${engine_requests[$engine]}" "${engine_defaults[$engine]}")

  if [ "${resolved_version}" == "" ]; then
    error "Requested engine $engine version ${engine_requests[$engine]} does not match available versions: ${engine_versions[$engine]}"
  else
    echo $resolved_version
  fi
}

function package_download() {
  engine="$1"
  version="$2"
  location="$3"

  mkdir -p $location
  package="http://${S3_BUCKET}.s3.amazonaws.com/$engine-$version.tgz"
  curl $package -s -o - | tar xzf - -C $location
}

bootstrap_node=$(mktmpdir bootstrap_node)
package_download "nodejs" "0.4.7" $bootstrap_node

# make some associative arrays
declare -A engine_versions
declare -A engine_defaults
declare -A engine_requests

engine_defaults["node"]="0.6.x"
engine_defaults["npm"]="1.0.x"

engine_versions["node"]=$(manifest_versions "nodejs")
engine_requests["node"]=$(package_engine_version "node")

engine_versions["npm"]=$(manifest_versions "npm")
engine_requests["npm"]=$(package_engine_version "npm")

echo "-----> Resolving engine versions"

# add a warning if no version of node specified
if [ "${engine_requests["node"]}" == "" ]; then
  echo
  echo "WARNING: No version of Node.js specified in package.json, see:" | indent
  echo "https://devcenter.heroku.com/articles/nodejs-versions" | indent
  echo
fi

NODE_VERSION=$(package_resolve_version "node")
echo "Using Node.js version: ${NODE_VERSION}" | indent

NPM_VERSION=$(package_resolve_version "npm")
echo "Using npm version: ${NPM_VERSION}" | indent

# cache directories
CACHE_STORE_DIR="$CACHE_DIR/node_modules/$NODE_VERSION/$NPM_VERSION"
CACHE_TARGET_DIR="$BUILD_DIR/node_modules"

# s3 packages
NODE_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/nodejs-${NODE_VERSION}.tgz"
NPM_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/npm-${NPM_VERSION}.tgz"
SCONS_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/scons-${SCONS_VERSION}.tgz"

# vendor directories
VENDORED_NODE="$(mktmpdir node)"
VENDORED_NPM="$(mktmpdir npm)"
VENDORED_SCONS="$(mktmpdir scons)"

# download and unpack packages
echo "-----> Fetching Node.js binaries"
package_download "nodejs" "${NODE_VERSION}" "${VENDORED_NODE}"
package_download "npm" "${NPM_VERSION}" "${VENDORED_NPM}"
package_download "scons" "${SCONS_VERSION}" "${VENDORED_SCONS}"

# vendor node into the slug
PATH="$BUILD_DIR/bin:$PATH"
echo "-----> Vendoring node into slug"
mkdir -p "$BUILD_DIR/bin"
cp "$VENDORED_NODE/bin/node" "$BUILD_DIR/bin/node"

# setting up paths for building
PATH="$VENDORED_SCONS:$VENDORED_NODE/bin:$PATH"
INCLUDE_PATH="$VENDORED_NODE/include"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"

# install dependencies with npm
echo "-----> Installing dependencies with npm"
run_npm "install -g --production"
run_npm "rebuild"
echo "Dependencies installed" | indent

# ### Fin. (really)
